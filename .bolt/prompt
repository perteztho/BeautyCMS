Overall Goal: Develop a complete, production-ready web application that includes both a beautiful, fully-featured frontend and a robust backend. The final product should be a cohesive, functional web app.

Frontend Requirements:

Technology Stack: The frontend will be built using a React framework (e.g., Next.js, Vite with React).

Styling: Use Tailwind CSS for all styling. The design should be unique, elegant, and not "cookie-cutter." Aim for a production-worthy aesthetic.

UI Components: Use React hooks for state management and logic. Do not install additional UI component libraries unless absolutely necessary to achieve a specific feature.

Icons: Use lucide-react for all icons, including logos and other graphical elements.

Structure: The frontend code should be organized logically, with separate components for different parts of the UI (e.g., a header component, a main content area component, a footer component).

Responsiveness: The design must be fully responsive, providing an excellent user experience on desktop, tablet, and mobile devices.

Backend Requirements:

Technology Stack: The backend should be built using a suitable framework (e.g., Node.js with Express, Next.js API Routes).

Database: A database will be required for persistent data storage. Please choose an appropriate database solution (e.g., a simple file-based database for small projects, or a more robust solution like PostgreSQL or MongoDB for larger applications).

API Design: The backend should expose a RESTful or GraphQL API for the frontend to consume. The API should be well-structured, secure, and documented.

Functionality: The backend must handle all business logic, data persistence, user authentication (if required), and other server-side operations.

Instructions for Me (the Coding Partner):

Code Creation: Provide complete, functional, and well-documented code for both the frontend and the backend.

Implementation Guide: Provide clear, step-by-step instructions on how to set up the project, install dependencies, configure the environment, and run the application.

Educational Explanation: Explain the reasoning behind the code choices, the project structure, and the communication between the frontend and backend.

Assumptions and Limitations: Clearly state any assumptions you've made (e.g., the specific database used) and any limitations of the provided code (e.g., lack of advanced error handling).